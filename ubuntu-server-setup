#!/bin/bash
# Parts of this script is taken from the tutorial:
# http://bookofzeus.com/harden-ubuntu
# In a best effort manner

# Skipped parts
# - installing tools
# - disable shell accounts
# - add swap
# - disable bind9 to use ipv6
# - secure TCP wrapper
# - security limits (nr of processes pr user)
# - timezone
# - disable anacron
# - disable apport
# - disable autofs
# - disable bluetooth
# - disable and removal of cups
# - disable dovecot
# - disable modemManager
# - diable nfs
# - disable snmp server
# - disable telnet
# - diable whoopsie
# - disable wireless
# - disable zeitgeist
# - apache conf
# - app armor
# - MySQL conf
# - Php conf
# - Protect DDOS attacks
# - iptables
# - ssh config
# - sysctl config

# Variables used in this script
OPENSSL_VERSION=openssl-1.0.2g
SHA256SUM=sha256
PGPSUM=pgp.asc

# You may want to change this to your own preferences
OBFUSCATED_USER=b2a1c6
OBFUSCATED_GROUP=z5a3b1

# Host settings
HOST_NAME=dumbo
LOCAL_DOMAIN=localdomain
DOMAIN_NAME=mydomain.dom
IP_ADDR=10.0.2.15

# Clean up everything
sudo apt-get update
sudo apt-get upgrade -y
sudo apt-get dist-upgrade -y
sudo apt-get autoremove -y
sudo apt-get autoclean -y

# install unattended upgrades

sudo apt-get install unattended-upgrades

# Creates the file /etc/apt/apt.conf.d/20auto-upgrades
sudo dpkg-reconfigure -plow unattended-upgrades

# Customize automatic updates

UPGRADE_SETUP="// Automatically upgrade packages from these (origin:archive) pairs \n
  Unattended-Upgrade::Allowed-Origins {\n
      \"\${distro_id}:\${distro_codename}-security\";\n
  //  \"\${distro_id}:\${distro_codename}-updates\";\n
  //  \"\${distro_id}:\${distro_codename}-proposed\";\n
  //  \"\${distro_id}:\${distro_codename}-backports\";\n
  };\n
  \n
  //Unattended-Upgrade::Mail \"my_user@my_domain.com\";"
  
sudo echo -e $UPGRADE_SETUP > /etc/apt/apt.conf.d/20auto-upgrades

# Install some necessary packages
sudo apt-get install build-essential

# Create hard to get user
# You  would of course modify this to your own preferences
sudo useradd -d /home/$OBFUSCATED_USER -s /bin/bash -m $OBFUSCATED_USER

# Give sudo access to the user
sudo usermod -a -G sudo $OBFUSCATED_GROUP

# Set a password
sudo passwd $OBFUSCATED_USER

# Lock the root account
sudo passwd -l root

# In case you want to unlock the root account, here is the command
# sudo passwd -u root

# Disable ipv6
# Remove ip6 from /etc/hosts
sudo grep -v "ip6" /etc/hosts > temp && mv temp /etc/hosts

# If you need to remove ipv6 settings, uncomment this line
# grep -v "ipv6" /etc/sysctl.conf > temp && mv temp /etc/sysctl.conf
DISABLE_IPV6="#disable ipv6\nnet.ipv6.conf.all.disable_ipv6 = 1\nnet.ipv6.conf.default.disable_ipv6 = 1\nnet.ipv6.conf.lo.disable_ipv6 = 1\n"

sudo echo -e $DISABLE_IPV6 >> /etc/sysctl.conf
sudo sysctl -p


# Disable IPV6 in unified firewall ufw
sudo find /etc/default/ufw -type f -exec sed -i 's/IPV6=yes/IPV6=no/g' {} \;
sudo ufw reload

# Disable IRQ Balance, so that hardware interrupts don't show up in your threads
sudo find /etc/default/irqbalance -type f -exec sed -i 's/ENABLED="1"/ENABLED="0"/g' {} \;

# Upgrade openssl package, so that it is patched against heartbleed bug
sudo apt-get upgrade openssl libssl-dev
sudo apt-cache policy openssl libssl-dev

# Install and switch to latest stable openssl library
curl https://www.openssl.org/source/$OPENSSL_VERSION.tar.gz > $OPENSSL_VERSION.tar.gz
curl https://www.openssl.org/source/$OPENSSL_VERSION.tar.gz.$SHA256SUM > $SHA256SUM
curl https://www.openssl.org/source/$OPENSSL_VERSION.tar.gz.asc > $PGPSUM

# Make the file a proper sha256 file to enable autochecking
(echo " $OPENSSL_VERSION.tar.gz " & cat ${SHA256SUM}) | xargs -n 2 | awk '{printf $1 " " $2}' > tmp
mv tmp $SHA256SUM

# Make sure everything is written to disk on slow vms ..
sleep .2

# Check the sha256sum, if not OK, ABORT with error code 1
FILE_OK=$(sha256sum -c ${SHA256SUM})

if echo $FILE_OK | grep -q 'OK';then
  echo "The Sha256Sum matched the downloaded source bundle"
else
  echo "The Sha256sum of downloaded file does not match"
  exit 1
fi

echo "Extracting and installing files .."
tar vxzf $OPENSSL_VERSION.tar.gz
echo "Entering archive"

cd $OPENSSL_VERSION
echo "configuring the packages"

sudo ./config

echo "building"
sudo make

echo "installing"
sudo make install

echo "Switch to newly installed openssl"
sudo ln -sf /usr/local/ssl/bin/openssl `which openssl`

cd ../

# Clean up openssl installation
rm -rf $OPENSSL_VERSION
rm $OPENSSL_VERSION.tar.gz
rm $SHA256SUM
rm $PGPSUM

# Secure Shared Memory
SEC_SHARED_MEM="tmpfs     /run/shm    tmpfs	defaults,noexec,nosuid	0	    0"
sudo echo >> $SECH_SHARED_MEM
sudo echo -e $SEC_SHARED_MEM >> /etc/fstab
# Enable the changes
sudo mount -a

# To find files and folders that can be secured, you can run this command
# sudo find / -perm -2 ! -type l -ls

# Securing /tmp folder
# creating a secured tmp disk
sudo dd if=/dev/zero of=/usr/tmpDSK bs=1024 count=1024000

# Backing up the current /tmp folder
sudo cp -Rpf /tmp /tmpbackup

# Mounting the new /tmp partition and setting the right permissions
sudo mount -t tmpfs -o loop,noexec,nosuid,rw /usr/tmpDSK /tmp
sudo chmod 1777 /tmp

#Copying the data from backup folder, and removing backup folder
sudo cp -Rpf /tmpbackup/* /tmp/
sudo rm -rf /tmpbackup/*

# Adding the new entry to fstab
sudo echo >> /etc/fstab
sudo echo "/usr/tmpDSK /tmp tmpfs loop,nosuid,noexec,rw   0   0" >> /etc/fstab

# Refreshing fstab
sudo mount -o remount /tmp

# /var/tmp is used by some services, let's link this to /tmp
# You will need to restart those services accordingly
sudo mv /var/tmp /var/tmpold
sudo ln -s /tmp /var/tmp
sudo cp -prf /var/tmpold/* /tmp/

# Server Stability, make it reboot if it runs out of memory
sudo echo >> /etc/sysctl.conf
sudo echo >> "# Reboot on Out Of Memory failure" >> /etc/sysctl.conf
sudo echo "vm.panic_on_oom=1" >> /etc/sysctl.conf
sudo echo "kernel.panic=1" >> /etc/sysctl.conf

# Set hostname and hostfile
HOST_NAME=dumbo
LOCAL_DOMAIN=localdomain
DOMAIN_NAME=mydomain.dom
IP_ADDR=10.0.2.15

echo $HOST_NAME >> /etc/hostname
sudo hostname -F /etc/hostname

sudo echo "127.0.0.1     localhost.$LOCAL_DOMAIN localhost" >> /etc/hosts
sudo echo "$IP_ADDR      $HOST_NAME.$DOMAIN_NAME    $HOST_NAME" >> /etc/hosts

# Disable and remove atd
sudo echo 'manual' > /etc/init/atd.override
sudo apt-get purge at

# Disable and remove avahi (does not seem to be installed by default on ubuntu 14.03 LTS)
cd /etc/init
sudo touch avahi-daemon.override
sudo echo "manual" > avahi-daemon.override
cd -

sudo apt-get remove avahi-daemon avahi-utils

# Disable ctrl-alt-delete to reboot machine accidently
sudo find /etc/init/control-alt-delete.conf -type f -exec sed -i 's/exec/# exec/g' {} \;

# Setup firewall
#!/bin/bash
sudo apt-get install -y ufw
sudo ufw allow ssh
sudo ufw allow http
sudo ufw deny 23
sudo ufw default deny
sudo ufw enable

# To see status of ufw
# sudo ufw status verbose
# sudo iptables -L

# Prevent ip spoofing
sudo echo "order bind,hosts" > /etc/host.conf
sudo echo "nospoof on" >> /etc/host.conf

